{
    "collab_server" : "",
    "contents" : "###generates training model for DFG and C-Helix prediction \n###Generates variables: \n####training.dfg.rf to train dfg model  \n####training.chelix.rf to train chelix model based on data + dfg classification\n####test.chelix.predictions final prediction \n#### predictions in : /2_predicted_classes/8.29.17.predicted.chelix.dfg.conformation.csv\"\n#### and 2_predicted_classes/8.29.17.predicted+verified.chelix.dfg.conformation.csv\nlibrary(tidyverse)\nlibrary(randomForest)\nlibrary(plotly)\nlibrary(clusterSim)\n##set seed for randomforest \nset.seed(10)\ndat = read.table(\"../../1_manual_classes/stdy_kinase.param.170829.rrahman.csv\",header =T, sep =\",\" )\n##get relevant columns \ndat.rel.col = dat[,c(1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,30,33)]\n##partition and format test/training data \ntraining = dat.rel.col[c(1,3:265),] ## row 1 is duplcate of row 2 \nrow.names(training) = training$pdb_id\ntraining.class = as.factor(as.character(training$Group))\ntraining.dfg = training$dfg_st\ntraining[,c(1,2,3,12)] = NULL\ntest = dat.rel.col[266:nrow(dat.rel.col),]\nrow.names(test) = test$pdb_id\ntest[,c(1,2,3,12)] = NULL\n##remove row with NA lose about 139 cases \ntest.complete = test[complete.cases(test),]\n##impute missing training data using c-helix class \ntraining.impute = rfImpute(x = training, y = training.class ,   ntree = 1000)\ntraining.impute$training.class = NULL\n##normalize data to 0\ncombined.data = as.data.frame(rbind(training.impute, test.complete))\ncombined.n = data.Normalization(combined.data,type = \"n5\", normalization = \"column\" )\ntraining.n = combined.n[1:264,]\ntest.n = combined.n[265:nrow(combined.n),]\n##fix dfg stat values\ntraining.dfg.2 = c()\nfor (i in 1:length(training.class))\n{\n  if (training.class[i] == \"other\")\n  {\n    training.dfg.2[i] = 3\n  }\n  else\n  {\n    g = substr(training.class[i], 3, 5 )\n    if (g == \"di\") {\n      training.dfg.2[i] = 1\n    }\n    else {\n      training.dfg.2[i] = 0              \n    }\n  }\n}\ntraining.dfg.2 = as.factor(training.dfg.2)\n###train DFG classifier \ntraining.dfg.rf = randomForest( training.dfg.2 ~., data=training.n, \n                                ntree = 1000)\n##train Chelix classifer \ntraining.n.dfg = training.n\ntraining.n.dfg$dfg = training.dfg.2 ##add dfg data to data \ntraining.chelix.rf = randomForest( training.class ~., data=training.n.dfg, \n                                   ntree = 1000)\n##predict test classes \ntest.pred.dfg = as.data.frame(predict(object = training.dfg.rf, newdata = test.n, type = \"prob\"))\ntest.pred.dfg.2 = test.n\nfor (i in 1:nrow(test.pred.dfg)) {\n  col = (which.max(test.pred.dfg[i,]))\n  dfgstat = as.numeric(row.names(as.data.frame(col)))\n  test.pred.dfg.2[i, 14] = dfgstat\n} \ntest.dfg =  test.pred.dfg.2$V14\ntest.pred.dfg.2$dfg  = test.dfg\ntest.pred.dfg.2$V14 = NULL\ntest.pred.dfg.2$dfg = as.factor(test.pred.dfg.2$dfg)\ntest.chelix.pred = as.data.frame(predict( object = training.chelix.rf, newdata =  test.pred.dfg.2, type = \"prob\"))\n\ntest.chelix.predictions = test.pred.dfg.2\n\n##assign class to rows based on class with max probablity \nfor ( i in 1:nrow(test.chelix.pred))\n{\n  col = which.max(test.chelix.pred[i,])\n  test.chelix.predictions[i,15] =  as.character(row.names(as.data.frame(col)))\n  test.chelix.predictions[i,16] = as.numeric(test.chelix.pred[i,col])\n}\n\nwrite.table(x = test.chelix.predictions, file = \"../../2_predicted_classes/8.29.17.predicted.chelix.dfg.conformation.csv\",  sep =\",\", quote = F, eol = \"\\n\", row.names = T, col.names = T )\n\n\nhead(test.chelix.predictions)\nhead(training)\ntraining.n$dfg = training.dfg.2\ntraining.n$V15 = training.class\ntraining.n$V16 = rep(1, nrow(training))\nfull.data = as.data.frame(rbind(training.n,test.chelix.predictions))\nsource = c(rep(\"training\",nrow(training)),rep(\"test\",nrow(test.chelix.predictions)))\nfull.data$source = source\nwrite.table(x = full.data, file = \"../../2_predicted_classes/8.29.17.predicted+verified.chelix.dfg.conformation.csv\" ,      sep =\",\", quote = F, eol = \"\\n\", row.names = T, col.names = T )\n\n\n",
    "created" : 1507873902860.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1738077685",
    "id" : "ABD167C0",
    "lastKnownWriteTime" : 1504968331,
    "last_content_update" : 1504968331,
    "path" : "~/Dropbox (Schlessinger lab)/Schlessinger lab Team Folder/shared/1_kinase_family/scripts/kinase_classification_r_project/train_random_forest_twostep.R",
    "project_path" : "train_random_forest_twostep.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}