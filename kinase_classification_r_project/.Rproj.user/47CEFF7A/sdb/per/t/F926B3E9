{
    "collab_server" : "",
    "contents" : "###Generates ROC curves of training data \nsource(\"./train_random_forest.R\")\nlibrary(ggthemes)\nlibrary(pracma)\nactual_class.dfg = training.dfg.2\nactual_class.chelix = training.class\nthresholds = seq(0,1,by=.001) ### 1000 threshold values\nchelixpred = training.chelix.rf$votes\ndfgpred = training.dfg.rf$votes\n####confusionmatrix \n###       Tact | Fact\n## Tpred   TP | FP \n## Fpred   FN | TN \nroc_data = function(pred,class,threshold,type)\n{\n  tpr.all =c()\n  fpr.all =c()\n  for ( i in threshold)\n  {\n    TP = 0 \n    FN = 0 \n    FP = 0\n    TN = 0\n    for (ii in 1:length(pred )) \n    {\n        prob = pred[ii] \n        act = class[ii]\n        if (prob >=  i )\n        {\n          if (act == type )\n          {\n              TP = TP +1  ;        \n          }\n          else \n          {\n              FP = FP +1  ;\n          }\n        }\n        else\n        {\n          if (act == type )\n          {\n             FN = FN + 1 ;\n          }\n          else \n          {\n             TN = TN + 1 ;\n          }\n        }\n    }\n    tpr = TP/(TP + FN )\n    fpr = FP / (FP + TN )\n    tpr.all = c(tpr.all, tpr)\n    fpr.all = c(fpr.all, fpr)\n  }\n  roc = as.data.frame(cbind(fpr.all,tpr.all))\n  type = rep(type,nrow(roc))\n  roc$type = type\n  return(roc)\n}\n###Chelix ROC\nr = roc_data(chelixpred[,1], actual_class.chelix, thresholds, \"cidi\")\nr2 = roc_data(chelixpred[,2], actual_class.chelix, thresholds, \"cido\")\nr3 = roc_data(chelixpred[,3], actual_class.chelix, thresholds, \"codi\")\nr4 = roc_data(chelixpred[,4], actual_class.chelix, thresholds, \"codo\")\nr5 = roc_data(chelixpred[,5], actual_class.chelix, thresholds, \"other\")\n\nr.auc = abs(trapz(r$fpr.all, r$tpr.all))\nr2.auc = abs(trapz(r2$fpr.all, r2$tpr.all))\nr3.auc = abs(trapz(r3$fpr.all, r3$tpr.all))\nr4.auc = abs(trapz(r4$fpr.all, r4$tpr.all))\nr5.auc = abs(trapz(r5$fpr.all, r5$tpr.all))\n\nrall = as.data.frame(rbind(r,r2,r3,r4,r5))\ncolors = c(\"#443333\",\"#cc5522\",\"#00ccff\",\"#AA96DA\", \"grey50\")\n\nggplot(rall, aes(fpr.all, tpr.all, color = factor(type),  fill = factor(type))) + \n  geom_path(size =3, color = \"black\") +  \n  geom_point(size = 8, alpha = 1) +\n  geom_path(size =3, color = \"black\") + \n  geom_abline(intercept = 0, slope = 1, color = \"red\") + \n  scale_fill_manual(values =  colors) + \n  scale_color_manual(values =  colors) +  \n  facet_wrap(~type) + theme_light(base_size = 20) + \n  theme(legend.position = \"none\", \n        strip.text = element_text(colour = 'black', size = 60) , \n        strip.background = element_rect(fill = \"grey\",colour = \"lightgrey\"), \n        axis.text = element_text(size = 35)  , \n        axis.title = element_text(size = 60)) + \n  ylab(\"True Positive Rate\") + xlab(\"False Positive Rate\")\n\n###DFG ROC\nd1 = roc_data(pred = dfgpred[,1],class = actual_class.dfg , threshold =thresholds ,type = 0 )\nd2 = roc_data(pred = dfgpred[,2],class = actual_class.dfg , threshold =thresholds ,type = 1 )\nd3 = roc_data(pred = dfgpred[,3],class = actual_class.dfg , threshold =thresholds ,type = 3 )\n\nrall = as.data.frame(rbind(d1,d2,d3)) \nggplot(rall, aes(fpr.all, tpr.all, color = factor(type),  fill = factor(type))) + \n    geom_path(size =3, color = \"black\") +  \n    geom_point(size = 8, alpha = 1) + \n    geom_path(size =1, color = \"black\") + \n    geom_abline(intercept = 0, slope = 1, color = \"red\")  +  \n    facet_wrap(~type) +\n    theme_light(base_size = 20) + \n    theme(axis.text = element_text(size = 20) , \n          legend.position = \"none\", \n          strip.text = element_text(colour = 'black', size = 50) , \n          strip.background = element_rect(fill = \"grey\",colour = \"lightgrey\"),\n          axis.title = element_text(size = 40)) + \n  ylab(\"True Positive Rate\") + \n  xlab(\"False Positive Rate\")\n\nd1.auc = abs(trapz(d1$fpr.all, d1$tpr.all))\nd2.auc = abs(trapz(d2$fpr.all, d2$tpr.all))\nd3.auc = abs(trapz(d3$fpr.all, d3$tpr.all))\n",
    "created" : 1507875012605.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2738256329",
    "id" : "F926B3E9",
    "lastKnownWriteTime" : 1504820269,
    "last_content_update" : 1504820269,
    "path" : "~/Dropbox (Schlessinger lab)/Schlessinger lab Team Folder/shared/1_kinase_family/scripts/kinase_classification_r_project/generate_ROC_curves.R",
    "project_path" : "generate_ROC_curves.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}