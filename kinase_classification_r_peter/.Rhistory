dat.2.scaled.split = split(dat.2.scaled, f = dat.2.scaled$clust)
complete.df = data.frame()
for (i in dat.2.scaled.split)
{
c = unique(as.character(i$clust))
i$clust = NULL
i.st = stack(i)
i.st$clust = rep(c, nrow(i.st))
complete.df.l = as.data.frame(rbind(complete.df, i.st))
complete.df = complete.df.l
}
##fill colors for classes
colors = c("#CAF270","#73D487","#30B096","#40607A", "#453B52")
colors = c("#443333","#cc5522","#00ccff","#AA96DA", "grey50")
ggplot(complete.df, aes(clust , values, fill = clust)) + geom_boxplot() +
geom_violin(color = "lightgrey",scale = "width", trim =T, alpha = .8) +
scale_fill_manual(values =  colors ) +  facet_wrap(~ind) +
theme_light(base_size = 20) + ylim(-1.1,1.1) +
theme(legend.position = "none",
strip.text = element_text(colour = 'black', size = 30) ,
axis.title.x = element_blank() ,
strip.background = element_rect(fill = "grey",colour = "lightgrey"),
axis.text = element_text(size = 30)) + ylab(label = "Normalized Score")
ggplot(complete.df, aes(clust , values, fill = clust)) + geom_boxplot() +
geom_violin(color = "lightgrey",scale = "width", trim =T, alpha = .8) +
scale_fill_manual(values =  colors ) +  facet_wrap(~ind) +
theme_light(base_size = 20) + ylim(-1.1,1.1) +
theme(legend.position = "none",
strip.text = element_text(colour = 'black', size = 20) ,
axis.title.x = element_blank() ,
strip.background = element_rect(fill = "grey",colour = "lightgrey"),
axis.text = element_text(size = 20)) + ylab(label = "Normalized Score")
ggplot(complete.df, aes(clust , values, fill = clust)) + geom_boxplot() +
geom_violin(color = "lightgrey",scale = "width", trim =T, alpha = .8) +
scale_fill_manual(values =  colors ) +  facet_wrap(~ind) +
theme_light(base_size = 20) + ylim(-1.1,1.1) +
theme(legend.position = "none",
strip.text = element_text(colour = 'black', size = 20) ,
axis.title.x = element_blank() ,
strip.background = element_rect(fill = "grey",colour = "lightgrey"),
axis.text = element_text(size = 18)) + ylab(label = "Normalized Score")
##normalize data to fit -1 to 1
dat.2.normal = data.Normalization(dat.2.impute, type = "n5", normalization = "column" )
dat.2.scaled = dat.2.normal
##add "Conformation Class" to normalized data
dat.2.scaled$clust = dat$Group[2:265]
##add "pdb_id" to normalized data
row.names(dat.2.scaled) = dat$pdb_id[2:265]
##format data for ggplot
dat.2.scaled.split = split(dat.2.scaled, f = dat.2.scaled$clust)
complete.df = data.frame()
for (i in dat.2.scaled.split)
{
c = unique(as.character(i$clust))
i$clust = NULL
i.st = stack(i)
i.st$clust = rep(c, nrow(i.st))
complete.df.l = as.data.frame(rbind(complete.df, i.st))
complete.df = complete.df.l
}
##fill colors for classes
colors = c("#CAF270","#73D487","#30B096","#40607A", "#453B52")
colors = c("#443333","#cc5522","#00ccff","#AA96DA", "grey50")
ggplot(complete.df, aes(clust , values, fill = clust)) + geom_boxplot() +
geom_violin(color = "lightgrey",scale = "width", trim =T, alpha = .8) +
scale_fill_manual(values =  colors ) +  facet_wrap(~ind) +
theme_light(base_size = 20) + ylim(-1.1,1.1) +
theme(legend.position = "none",
strip.text = element_text(colour = 'black', size = 20) ,
axis.title.x = element_blank() ,
strip.background = element_rect(fill = "grey",colour = "lightgrey"),
axis.text = element_text(size = 16)) + ylab(label = "Normalized Score")
#get training data and relevant data columns; row 2:3 are duplicate for internal checking
dat.2 = data.matrix(dat[2:265, c(18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36)])
##impute missing data
dat.2.impute = as.data.frame(rfImpute(
x = dat.2,
y = as.factor(dat$Group[2:265]) ,
ntree = 1000))
dat.2.impute$y = NULL
##normalize data to fit -1 to 1
dat.2.normal = data.Normalization(dat.2.impute, type = "n5", normalization = "column" )
dat.2.scaled = dat.2.normal
##add "Conformation Class" to normalized data
dat.2.scaled$clust = dat$Group[2:265]
##add "pdb_id" to normalized data
row.names(dat.2.scaled) = dat$pdb_id[2:265]
##format data for ggplot
dat.2.scaled.split = split(dat.2.scaled, f = dat.2.scaled$clust)
complete.df = data.frame()
for (i in dat.2.scaled.split)
{
c = unique(as.character(i$clust))
i$clust = NULL
i.st = stack(i)
i.st$clust = rep(c, nrow(i.st))
complete.df.l = as.data.frame(rbind(complete.df, i.st))
complete.df = complete.df.l
}
##fill colors for classes
colors = c("#CAF270","#73D487","#30B096","#40607A", "#453B52")
colors = c("#443333","#cc5522","#00ccff","#AA96DA", "grey50")
ggplot(complete.df, aes(clust , values, fill = clust)) + geom_boxplot() +
geom_violin(color = "lightgrey",scale = "width", trim =T, alpha = .8) +
scale_fill_manual(values =  colors ) +  facet_wrap(~ind) +
theme_light(base_size = 20) + ylim(-1.1,1.1) +
theme(legend.position = "none",
strip.text = element_text(colour = 'black', size = 20) ,
axis.title.x = element_blank() ,
strip.background = element_rect(fill = "grey",colour = "lightgrey"),
axis.text = element_text(size = 16)) + ylab(label = "Normalized Score")
#get training data and relevant data columns; row 2:3 are duplicate for internal checking
dat.2 = data.matrix(dat[2:265, c(18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,35,36)])
##impute missing data
dat.2.impute = as.data.frame(rfImpute(
x = dat.2,
y = as.factor(dat$Group[2:265]) ,
ntree = 1000))
dat.2.impute$y = NULL
##normalize data to fit -1 to 1
dat.2.normal = data.Normalization(dat.2.impute, type = "n5", normalization = "column" )
dat.2.scaled = dat.2.normal
##add "Conformation Class" to normalized data
dat.2.scaled$clust = dat$Group[2:265]
##add "pdb_id" to normalized data
row.names(dat.2.scaled) = dat$pdb_id[2:265]
##format data for ggplot
dat.2.scaled.split = split(dat.2.scaled, f = dat.2.scaled$clust)
complete.df = data.frame()
for (i in dat.2.scaled.split)
{
c = unique(as.character(i$clust))
i$clust = NULL
i.st = stack(i)
i.st$clust = rep(c, nrow(i.st))
complete.df.l = as.data.frame(rbind(complete.df, i.st))
complete.df = complete.df.l
}
##fill colors for classes
colors = c("#CAF270","#73D487","#30B096","#40607A", "#453B52")
colors = c("#443333","#cc5522","#00ccff","#AA96DA", "grey50")
ggplot(complete.df, aes(clust , values, fill = clust)) + geom_boxplot() +
geom_violin(color = "lightgrey",scale = "width", trim =T, alpha = .8) +
scale_fill_manual(values =  colors ) +  facet_wrap(~ind) +
theme_light(base_size = 20) + ylim(-1.1,1.1) +
theme(legend.position = "none",
strip.text = element_text(colour = 'black', size = 20) ,
axis.title.x = element_blank() ,
strip.background = element_rect(fill = "grey",colour = "lightgrey"),
axis.text = element_text(size = 16)) + ylab(label = "Normalized Score")
###if library is not availble use the command install.packages('<packagename>')
##Load Libraries
library(randomForest)
library(plotly)
##read file
## set row names to be pdb_id
y = read.table("../../1_manual_classes/stdy_kinase.param.170829.rrahman.corr-171031.csv", sep = ",", header = T)
row.names(y) = y$pdb_id
## remove redundant pdb_id column since row names are pdb_id
y$pdb_id = NULL
y$pdb_id.1 = NULL
y = y[,c(2,4,5,6,7,8,10,11,13)]
View(y)
y.train = y[c(1,3:265),]
##get rows where there are assigned group class (get manually classified pdb_id )
y.train = y[which(y$Group != ""),]
View(y.train)
y.train = y[c(1,3:265),]
##get rows where there are assigned group class (get manually classified pdb_id )
#y.train = y[which(y$Group != ""),]
##set DFG status as last column 0= out, 1=in ,2 = other
for (i in 1:nrow(y.train))
{
if (y.train[i, ]$Group == "other")
{
y.train[i,10] = 2
}
else
{
g = substr(y.train[i, ]$Group, 3, 5 )
if (g == "di") {
y.train[i, 10] = 1
}
else {
y.train[i, 10] = 0
}
}
}
##subset data to test set with the remaining rows (rows that do not have manual classes)
y.test = y[which(y$Group == "")[1]:nrow(y),]
##factoring data tells R that the values are categorical data
y.train$Group = factor(y.train$Group)
y.train$Group.detail  = NULL
y.train$V10 = factor(y.train$V10)
##set seed for randomforest
set.seed(10)
##store classes for training data
dfg = y.train$V10
chelix = y.train$Group
##create training data for DFG classification based on only p1p1x and p2p2x
y.dfg = y.train
y.dfg[,c(1,2,3,4,7,8)]= NULL
## imput null/missing data using columns 2:9 to predict chelix classes
y.train.rf.impute = rfImpute(
x = y.train[,c(2:10)],
y = y.train$Group ,
ntree = 1000)
#y.train.rf.impute.2 =  y.train.rf.impute[c(2:9)]
colnames(y.train.rf.impute)[1] <- 'Group'
## Use all columns to train a DFG classifier
y.train.rf.dfg = randomForest( V10 ~., data=y.train.rf.impute[,c(2:ncol(y.train.rf.impute))],
ntree = 1000)
y.train.rf.impute$V10 = y.train$V10
## train Chelix predictor
y.train.rf = randomForest(Group ~.,data = y.train.rf.impute,
ntree = 1000)
##remove first two columns in test set (empty since no classes)
y.test[,c(1)]= NULL
##remove rows with null data
y.test = y.test[complete.cases(y.test),]
##predict DFG status for test set
y.test.pred.dfg = as.data.frame(predict(object = y.train.rf.dfg, newdata = y.test, type = "prob"))
##assign DFG for test set
y.test.dfg = y.test
for (i in 1:nrow(y.test.pred.dfg)) {
col = (which.max(y.test.pred.dfg[i,]))
dfgstat = as.numeric(row.names(as.data.frame(col)))
y.test.dfg[i, 9] = dfgstat
}
colnames(y.test.dfg) = c(colnames(y.test), "V10")
y.test.dfg$V10 = factor(y.test.dfg$V10)
y.test.dfg$Row.names = row.names(y.test.dfg)
y.test.dfg.pred = y.test.dfg
y.test.dfg.pred[,c(1:8)] = NULL
colnames(y.test.dfg.pred) = c("DFGStatus", "Row.names")
y.test.dfg$Row.names = NULL
##predict probablities for classes for test set based from training
y.test.pred = as.data.frame(predict( object = y.train.rf,newdata =  y.test.dfg, type = "prob"))
y.test.pred.class = y.test.pred
##assign class to rows based on class with max probablity
for ( i in 1:nrow(y.test.pred))
{
col = which.max(y.test.pred[i,])
y.test.pred.class[i,6] =  as.character(row.names(as.data.frame(col)))
y.test.pred.class[i,7] = as.numeric(y.test.pred[i,col])
}
##get rows where there are assigned group class (get manually classified pdb_id )
#y.train = y[which(y$Group != ""),]
##set DFG status as last column 0= out, 1=in ,2 = other
for (i in 1:nrow(y.train))
{
if (y.train[i, ]$Group == "other")
{
y.train[i,10] = 2
}
else
{
g = substr(y.train[i, ]$Group, 3, 5 )
if (g == "di") {
y.train[i, 10] = 1
}
else {
y.train[i, 10] = 0
}
}
}
##subset data to test set with the remaining rows (rows that do not have manual classes)
y.test = y[which(y$Group == "")[1]:nrow(y),]
##factoring data tells R that the values are categorical data
y.train$Group = factor(y.train$Group)
y.train$Group.detail  = NULL
y.train$V10 = factor(y.train$V10)
##set seed for randomforest
set.seed(10)
##store classes for training data
dfg = y.train$V10
chelix = y.train$Group
##create training data for DFG classification based on only p1p1x and p2p2x
y.dfg = y.train
y.dfg[,c(1,2,3,4,7,8)]= NULL
## imput null/missing data using columns 2:9 to predict chelix classes
y.train.rf.impute = rfImpute(
x = y.train[,c(2:10)],
y = y.train$Group ,
ntree = 1000)
View(y.train)
## imput null/missing data using columns 2:9 to predict chelix classes
#y.train.rf.impute = rfImpute(
#  x = y.train[,c(2:10)],
#  y = y.train$Group ,
#  ntree = 1000)
y.train.rf.impute = y.train
#y.train.rf.impute.2 =  y.train.rf.impute[c(2:9)]
colnames(y.train.rf.impute)[1] <- 'Group'
## Use all columns to train a DFG classifier
y.train.rf.dfg = randomForest( V10 ~., data=y.train.rf.impute[,c(2:ncol(y.train.rf.impute))],
ntree = 1000)
##read file
## set row names to be pdb_id
y = read.table("../../1_manual_classes/stdy_kinase.param.170829.rrahman.csv", sep = ",", header = T)
row.names(y) = y$pdb_id
## remove redundant pdb_id column since row names are pdb_id
y$pdb_id = NULL
y$pdb_id.1 = NULL
y = y[,c(2,4,5,6,7,8,10,11,13)]
y.train = y[c(1,3:265),]
##get rows where there are assigned group class (get manually classified pdb_id )
#y.train = y[which(y$Group != ""),]
##set DFG status as last column 0= out, 1=in ,2 = other
for (i in 1:nrow(y.train))
{
if (y.train[i, ]$Group == "other")
{
y.train[i,10] = 2
}
else
{
g = substr(y.train[i, ]$Group, 3, 5 )
if (g == "di") {
y.train[i, 10] = 1
}
else {
y.train[i, 10] = 0
}
}
}
##subset data to test set with the remaining rows (rows that do not have manual classes)
y.test = y[which(y$Group == "")[1]:nrow(y),]
##factoring data tells R that the values are categorical data
y.train$Group = factor(y.train$Group)
y.train$Group.detail  = NULL
y.train$V10 = factor(y.train$V10)
##set seed for randomforest
set.seed(10)
##store classes for training data
dfg = y.train$V10
chelix = y.train$Group
##create training data for DFG classification based on only p1p1x and p2p2x
y.dfg = y.train
y.dfg[,c(1,2,3,4,7,8)]= NULL
## imput null/missing data using columns 2:9 to predict chelix classes
y.train.rf.impute = rfImpute(
x = y.train[,c(2:10)],
y = y.train$Group ,
ntree = 1000)
#y.train.rf.impute = y.train
#y.train.rf.impute.2 =  y.train.rf.impute[c(2:9)]
colnames(y.train.rf.impute)[1] <- 'Group'
## Use all columns to train a DFG classifier
y.train.rf.dfg = randomForest( V10 ~., data=y.train.rf.impute[,c(2:ncol(y.train.rf.impute))],
ntree = 1000)
y.train.rf.impute$V10 = y.train$V10
## train Chelix predictor
y.train.rf = randomForest(Group ~.,data = y.train.rf.impute,
ntree = 1000)
##remove first two columns in test set (empty since no classes)
y.test[,c(1)]= NULL
##remove rows with null data
y.test = y.test[complete.cases(y.test),]
##predict DFG status for test set
y.test.pred.dfg = as.data.frame(predict(object = y.train.rf.dfg, newdata = y.test, type = "prob"))
##assign DFG for test set
y.test.dfg = y.test
for (i in 1:nrow(y.test.pred.dfg)) {
col = (which.max(y.test.pred.dfg[i,]))
dfgstat = as.numeric(row.names(as.data.frame(col)))
y.test.dfg[i, 9] = dfgstat
}
colnames(y.test.dfg) = c(colnames(y.test), "V10")
y.test.dfg$V10 = factor(y.test.dfg$V10)
y.test.dfg$Row.names = row.names(y.test.dfg)
y.test.dfg.pred = y.test.dfg
y.test.dfg.pred[,c(1:8)] = NULL
colnames(y.test.dfg.pred) = c("DFGStatus", "Row.names")
y.test.dfg$Row.names = NULL
##predict probablities for classes for test set based from training
y.test.pred = as.data.frame(predict( object = y.train.rf,newdata =  y.test.dfg, type = "prob"))
##read file
## set row names to be pdb_id
y = read.table("../../1_manual_classes/x_old/stdy_kinase.param.170825.rrahman.csv", sep = ",", header = T)
row.names(y) = y$pdb_id
## remove redundant pdb_id column since row names are pdb_id
y$pdb_id = NULL
y$pdb_id.1 = NULL
y = y[,c(2,4,5,6,7,8,10,11,13)]
y.train = y[c(1,3:265),]
##get rows where there are assigned group class (get manually classified pdb_id )
#y.train = y[which(y$Group != ""),]
##set DFG status as last column 0= out, 1=in ,2 = other
for (i in 1:nrow(y.train))
{
if (y.train[i, ]$Group == "other")
{
y.train[i,10] = 2
}
else
{
g = substr(y.train[i, ]$Group, 3, 5 )
if (g == "di") {
y.train[i, 10] = 1
}
else {
y.train[i, 10] = 0
}
}
}
##subset data to test set with the remaining rows (rows that do not have manual classes)
y.test = y[which(y$Group == "")[1]:nrow(y),]
##factoring data tells R that the values are categorical data
y.train$Group = factor(y.train$Group)
y.train$Group.detail  = NULL
y.train$V10 = factor(y.train$V10)
##set seed for randomforest
set.seed(10)
##store classes for training data
dfg = y.train$V10
chelix = y.train$Group
##create training data for DFG classification based on only p1p1x and p2p2x
y.dfg = y.train
y.dfg[,c(1,2,3,4,7,8)]= NULL
## imput null/missing data using columns 2:9 to predict chelix classes
y.train.rf.impute = rfImpute(
x = y.train[,c(2:10)],
y = y.train$Group ,
ntree = 1000)
#y.train.rf.impute = y.train
#y.train.rf.impute.2 =  y.train.rf.impute[c(2:9)]
colnames(y.train.rf.impute)[1] <- 'Group'
## Use all columns to train a DFG classifier
y.train.rf.dfg = randomForest( V10 ~., data=y.train.rf.impute[,c(2:ncol(y.train.rf.impute))],
ntree = 1000)
y.train.rf.impute$V10 = y.train$V10
## train Chelix predictor
y.train.rf = randomForest(Group ~.,data = y.train.rf.impute,
ntree = 1000)
##remove first two columns in test set (empty since no classes)
y.test[,c(1)]= NULL
##remove rows with null data
y.test = y.test[complete.cases(y.test),]
##predict DFG status for test set
y.test.pred.dfg = as.data.frame(predict(object = y.train.rf.dfg, newdata = y.test, type = "prob"))
##assign DFG for test set
y.test.dfg = y.test
for (i in 1:nrow(y.test.pred.dfg)) {
col = (which.max(y.test.pred.dfg[i,]))
dfgstat = as.numeric(row.names(as.data.frame(col)))
y.test.dfg[i, 9] = dfgstat
}
colnames(y.test.dfg) = c(colnames(y.test), "V10")
y.test.dfg$V10 = factor(y.test.dfg$V10)
y.test.dfg$Row.names = row.names(y.test.dfg)
y.test.dfg.pred = y.test.dfg
y.test.dfg.pred[,c(1:8)] = NULL
colnames(y.test.dfg.pred) = c("DFGStatus", "Row.names")
y.test.dfg$Row.names = NULL
##predict probablities for classes for test set based from training
y.test.pred = as.data.frame(predict( object = y.train.rf,newdata =  y.test.dfg, type = "prob"))
y.test.pred.class = y.test.pred
##assign class to rows based on class with max probablity
for ( i in 1:nrow(y.test.pred))
{
col = which.max(y.test.pred[i,])
y.test.pred.class[i,6] =  as.character(row.names(as.data.frame(col)))
y.test.pred.class[i,7] = as.numeric(y.test.pred[i,col])
}
y.test.pred.class[,1:5] = NULL
colnames(y.test.pred.class) = c("Class", "Probability")
y.predicted.class = merge(y.test.pred.class, y, by="row.names")
y.predicted.class = merge(y.predicted.class, y.test.dfg.pred, by = "Row.names")
write.table(x = y.predicted.class, file = "../Desktop/5_schles/Kinase inhibitor data set/6.26.17.predicted.chelix.dfg.conformation.csv",
sep =",", quote = F, eol = "\n", row.names = F, col.names = T )
write.table(x = y.predicted.class, file = "6.26.17.predicted.chelix.dfg.conformation.csv",
sep =",", quote = F, eol = "\n", row.names = F, col.names = T )
write.table(x= y.train, file = "6.26.17.verified.chelix.dfg.conformation.csv",
sep = ",", quote = F, eol = "\n", row.names = T, col.names = T)
##3D scatterplot code:
colors <- c('#4AC6B7', '#1972A4', '#965F8A', '#FF7070', '#C61951')
p = plot_ly(y.predicted.class, x = ~h_cgvc, y = ~p1p1x, z = ~p2p2x, color = ~Class,
colors = colors,  mode = 'markers', size = ~1-Probability,
marker = list(symbol = 'circle', sizemode = 'diameter',opacity = .9), sizes = c(10, 40),
text = ~paste('Id:', Row.names, '<br>Class:', Class, '<br>Probability:', Probability))
View(p)
View(p)
p = plot_ly(y.predicted.class, x = ~h_cgvc, y = ~p1p1x, z = ~p2p2x, color = ~Class,
colors = colors,  mode = 'markers', size = ~1-Probability,
marker = list(symbol = 'circle', sizemode = 'diameter',opacity = .9), sizes = c(10, 40),
text = ~paste('Id:', Row.names, '<br>Class:', Class, '<br>Probability:', Probability))
y.train$Row.names = row.names(y.train)
y.train$Probablity = rep( "v", nrow(y.train))
y.predicted.class$Group = NULL
#y.predicted.class$Group.detail = NULL
y3 = y.train[,c(12,1,11,2:10)]
names(y3) = names(y.predicted.class)
#colnames(y3) =  colnames(y.predicted.class)
y.combined = rbind(y3, y.predicted.class)
p = plot_ly(y.predicted.class, x = ~h_cgvc, y = ~p1p1x, z = ~p2p2x, color = ~Class,
colors = colors,  mode = 'markers', size = ~1-Probability,
marker = list(symbol = 'circle', sizemode = 'diameter',opacity = .9), sizes = c(10, 40),
text = ~paste('Id:', Row.names, '<br>Class:', Class, '<br>Probability:', Probability))
iplot
library(plotly)
packageVersion('plotly')
plotly_IMAGE(p)
plotly_IMAGE(p, format = "png")
plotly_IMAGE(p, format = "scatter3d")
help(signup, package = 'plotly')
signup("pmung", "mung.peter@gmail.com", save = T)
signup(pmung, mung.peter@gmail.com, save = T)
signup("pmung", mung.peter@gmail.com, save = T)
signup("pmung", "mung.peter@gmail.com", save = T)
plotly_IMAGE(p, format = "scatter3d")
help(signup, package = 'plotly')
