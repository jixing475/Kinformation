choices = featlist , selected = featlist[12]),
selectInput(inputId = "featureInput3",
label = "Select third feature",
choices = featlist , selected = featlist[13]),
plotOutput("click")
),
mainPanel(
plotlyOutput("scaplot", height = "1000px", width = "1000px",inline = T)))
)
server <- function(input, output) {
data2 = data.frame()
observeEvent(input$featureInput4,{
if ( input$featureInput4 == "all")
{
data2 = data
row.names(data2) = data2$PDBid
}
else
{
data2 = data[which(data$source == input$featureInput4) , ]
}
output$scaplot <- renderPlotly({
key = data2$PDBid
plot_ly(data2,
x= data2[,input$featureInput1] ,
y = data2[,input$featureInput2] ,
z = data2[,input$featureInput3],
color = ~V19, key = ~key ,
colors = colors,  mode = 'markers', text = ~paste('Id:', PDBid, '<br>Source', source)
) %>%
layout(
title = paste(input$featureInput1,"vs",input$featureInput2,"vs",input$featureInput3, sep = " "),
scene = list(
xaxis = list(title = input$featureInput1),
yaxis = list(title = input$featureInput2),
zaxis = list(title = input$featureInput3)
))
})
output$click <- renderPrint({
d <- event_data("plotly_click")
if (is.null(d))
{"Click events appear here (double-click to clear)" }
else
{
pd = gsub("_[A-Z]$", "",  d$key)
lin = paste("https://www.rcsb.org/structure/", pd, sep = "")
browseURL(lin)
}
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
data = read.table("../full.data.px.vec.csv", sep = "," , header = T )
data$key = data$PDBid
coln = gsub(".y$" , "", gsub(".x$", ".normalized", names(data)))
coln[1] = "PDBid"
colnames(data) = coln
library(shinythemes)
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for application that draws a histogram
ui <- fluidPage(
featlist  = coln[c(2,3,4,5,6,7,8,9,10,11,21,22,23,24,25,26,27,28,29,30)] ,
# Application title
titlePanel("3D scatterplot"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "featureInput4",
label = "Please Choose data type:",
choices = c("all","training","test"), selected = "training"),
selectInput(inputId = "featureInput1",
label = "Select first feature",
choices = featlist, selected = featlist[11]),
selectInput(inputId = "featureInput2",
label = "Select second feature",
choices = featlist , selected = featlist[12]),
selectInput(inputId = "featureInput3",
label = "Select third feature",
choices = featlist , selected = featlist[13]),
plotOutput("click")
),
mainPanel(
plotlyOutput("scaplot", height = "1000px", width = "1000px",inline = T)))
)
server <- function(input, output) {
data2 = data.frame()
observeEvent(input$featureInput4,{
if ( input$featureInput4 == "all")
{
data2 = data
row.names(data2) = data2$PDBid
}
else
{
data2 = data[which(data$source == input$featureInput4) , ]
}
output$scaplot <- renderPlotly({
key = data2$PDBid
plot_ly(data2,
x= data2[,input$featureInput1] ,
y = data2[,input$featureInput2] ,
z = data2[,input$featureInput3],
color = ~V19, key = ~key ,
colors = colors,  mode = 'markers', text = ~paste('Id:', PDBid, '<br>Source', source)
) %>%
layout(
title = paste(input$featureInput1,"vs",input$featureInput2,"vs",input$featureInput3, sep = " "),
scene = list(
xaxis = list(title = input$featureInput1),
yaxis = list(title = input$featureInput2),
zaxis = list(title = input$featureInput3)
))
})
output$click <- renderPrint({
d <- event_data("plotly_click")
if (is.null(d))
{"Click events appear here (double-click to clear)" }
else
{
pd = gsub("_[A-Z]$", "",  d$key)
lin = paste("https://www.rcsb.org/3d-view/", pd, "/1" , sep = "")
browseURL(lin)
}
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
data = read.table("../full.data.px.vec.csv", sep = "," , header = T )
data$key = data$PDBid
coln = gsub(".y$" , "", gsub(".x$", ".normalized", names(data)))
coln[1] = "PDBid"
colnames(data) = coln
library(shinythemes)
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for application that draws a histogram
ui <- fluidPage(
featlist  = coln[c(2,3,4,5,6,7,8,9,10,11,21,22,23,24,25,26,27,28,29,30)] ,
# Application title
titlePanel("3D scatterplot"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "featureInput4",
label = "Please Choose data type:",
choices = c("all","training","test"), selected = "all"),
selectInput(inputId = "featureInput1",
label = "Select first feature",
choices = featlist, selected = featlist[11]),
selectInput(inputId = "featureInput2",
label = "Select second feature",
choices = featlist , selected = featlist[12]),
selectInput(inputId = "featureInput3",
label = "Select third feature",
choices = featlist , selected = featlist[13]),
plotOutput("click")
),
mainPanel(
plotlyOutput("scaplot", height = "1000px", width = "1000px",inline = T)))
)
server <- function(input, output) {
data2 = data.frame()
observeEvent(input$featureInput4,{
if ( input$featureInput4 == "all")
{
data2 = data
row.names(data2) = data2$PDBid
}
else
{
data2 = data[which(data$source == input$featureInput4) , ]
}
output$scaplot <- renderPlotly({
key = data2$PDBid
plot_ly(data2,
x= data2[,input$featureInput1] ,
y = data2[,input$featureInput2] ,
z = data2[,input$featureInput3],
color = ~V19, key = ~key ,
colors = colors,  mode = 'markers', text = ~paste('Id:', PDBid, '<br>Source', source)
) %>%
layout(
title = paste(input$featureInput1,"vs",input$featureInput2,"vs",input$featureInput3, sep = " "),
scene = list(
xaxis = list(title = input$featureInput1),
yaxis = list(title = input$featureInput2),
zaxis = list(title = input$featureInput3)
))
})
output$click <- renderPrint({
d <- event_data("plotly_click")
if (is.null(d))
{"Click events appear here (double-click to clear)" }
else
{
pd = gsub("_[A-Z]$", "",  d$key)
lin = paste("https://www.rcsb.org/3d-view/", pd, "/1" , sep = "")
browseURL(lin)
}
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
colors
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
data = read.table("../full.data.px.vec.csv", sep = "," , header = T )
data$key = data$PDBid
coln = gsub(".y$" , "", gsub(".x$", ".normalized", names(data)))
coln[1] = "PDBid"
colnames(data) = coln
library(shinythemes)
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for application that draws a histogram
ui <- fluidPage(
featlist  = coln[c(2,3,4,5,6,7,8,9,10,11,21,22,23,24,25,26,27,28,29,30)] ,
# Application title
titlePanel("3D scatterplot"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "featureInput4",
label = "Please Choose data type:",
choices = c("all","training","test"), selected = "all"),
selectInput(inputId = "featureInput1",
label = "Select first feature",
choices = featlist, selected = featlist[11]),
selectInput(inputId = "featureInput2",
label = "Select second feature",
choices = featlist , selected = featlist[12]),
selectInput(inputId = "featureInput3",
label = "Select third feature",
choices = featlist , selected = featlist[13]),
verbatimTextOutput("click")
),
mainPanel(
plotlyOutput("scaplot", height = "1000px", width = "1000px",inline = T)))
)
server <- function(input, output) {
data2 = data.frame()
observeEvent(input$featureInput4,{
if ( input$featureInput4 == "all")
{
data2 = data
row.names(data2) = data2$PDBid
}
else
{
data2 = data[which(data$source == input$featureInput4) , ]
}
output$scaplot <- renderPlotly({
key = data2$PDBid
plot_ly(data2,
x= data2[,input$featureInput1] ,
y = data2[,input$featureInput2] ,
z = data2[,input$featureInput3],
color = ~V19, key = ~key ,
colors = colors,  mode = 'markers', text = ~paste('Id:', PDBid, '<br>Source', source)
) %>%
layout(
title = paste(input$featureInput1,"vs",input$featureInput2,"vs",input$featureInput3, sep = " "),
scene = list(
xaxis = list(title = input$featureInput1),
yaxis = list(title = input$featureInput2),
zaxis = list(title = input$featureInput3)
))
})
output$click <- renderPrint({
d <- event_data("plotly_click")
if (is.null(d))
{"Click events appear here (double-click to clear)" }
else
{
pd = gsub("_[A-Z]$", "",  d$key)
lin = paste("https://www.rcsb.org/3d-view/", pd, "/1" , sep = "")
browseURL(lin)
d
}
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
data = read.table("../full.data.px.vec.csv", sep = "," , header = T )
data$key = data$PDBid
coln = gsub(".y$" , "", gsub(".x$", ".normalized", names(data)))
coln[1] = "PDBid"
colnames(data) = coln
library(shinythemes)
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for application that draws a histogram
ui <- fluidPage(
featlist  = coln[c(2,3,4,5,6,7,8,9,10,11,21,22,23,24,25,26,27,28,29,30)] ,
# Application title
titlePanel("3D scatterplot"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "featureInput4",
label = "Please Choose data type:",
choices = c("all","training","test"), selected = "all"),
selectInput(inputId = "featureInput1",
label = "Select first feature",
choices = featlist, selected = featlist[11]),
selectInput(inputId = "featureInput2",
label = "Select second feature",
choices = featlist , selected = featlist[12]),
selectInput(inputId = "featureInput3",
label = "Select third feature",
choices = featlist , selected = featlist[13]),
verbatimTextOutput("click")
),
mainPanel(
plotlyOutput("scaplot", height = "1000px", width = "1000px",inline = T)))
)
server <- function(input, output) {
data2 = data.frame()
observeEvent(input$featureInput4,{
if ( input$featureInput4 == "all")
{
data2 = data
row.names(data2) = data2$PDBid
}
else
{
data2 = data[which(data$source == input$featureInput4) , ]
}
output$scaplot <- renderPlotly({
key = data2$PDBid
plot_ly(data2,
x= data2[,input$featureInput1] ,
y = data2[,input$featureInput2] ,
z = data2[,input$featureInput3],
color = ~V19, key = ~key ,
colors = colors,  mode = 'markers', text = ~paste('Id:', PDBid, '<br>Source', source)
) %>%
layout(
title = paste(input$featureInput1,"vs",input$featureInput2,"vs",input$featureInput3, sep = " "),
scene = list(
xaxis = list(title = input$featureInput1),
yaxis = list(title = input$featureInput2),
zaxis = list(title = input$featureInput3)
))
})
output$click <- renderPrint({
d <- event_data("plotly_click")
if (is.null(d))
{"Click events appear here (double-click to clear)" }
else
{
pd = gsub("_[A-Z]$", "",  d$key)
lin = paste("https://www.rcsb.org/3d-view/", pd, "/1" , sep = "")
browseURL(lin, browser = F)
d
}
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
data = read.table("../full.data.px.vec.csv", sep = "," , header = T )
data$key = data$PDBid
coln = gsub(".y$" , "", gsub(".x$", ".normalized", names(data)))
coln[1] = "PDBid"
colnames(data) = coln
library(shinythemes)
library(shiny)
library(ggplot2)
library(plotly)
# Define UI for application that draws a histogram
ui <- fluidPage(
featlist  = coln[c(2,3,4,5,6,7,8,9,10,11,21,22,23,24,25,26,27,28,29,30)] ,
# Application title
titlePanel("3D scatterplot"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "featureInput4",
label = "Please Choose data type:",
choices = c("all","training","test"), selected = "all"),
selectInput(inputId = "featureInput1",
label = "Select first feature",
choices = featlist, selected = featlist[11]),
selectInput(inputId = "featureInput2",
label = "Select second feature",
choices = featlist , selected = featlist[12]),
selectInput(inputId = "featureInput3",
label = "Select third feature",
choices = featlist , selected = featlist[13]),
verbatimTextOutput("click")
),
mainPanel(
plotlyOutput("scaplot", height = "1000px", width = "1000px",inline = T)))
)
server <- function(input, output) {
data2 = data.frame()
observeEvent(input$featureInput4,{
if ( input$featureInput4 == "all")
{
data2 = data
row.names(data2) = data2$PDBid
}
else
{
data2 = data[which(data$source == input$featureInput4) , ]
}
output$scaplot <- renderPlotly({
key = data2$PDBid
plot_ly(data2,
x= data2[,input$featureInput1] ,
y = data2[,input$featureInput2] ,
z = data2[,input$featureInput3],
color = ~V19, key = ~key ,
colors = colors,  mode = 'markers', text = ~paste('Id:', PDBid, '<br>Source', source)
) %>%
layout(
title = paste(input$featureInput1,"vs",input$featureInput2,"vs",input$featureInput3, sep = " "),
scene = list(
xaxis = list(title = input$featureInput1),
yaxis = list(title = input$featureInput2),
zaxis = list(title = input$featureInput3)
))
})
output$click <- renderPrint({
d <- event_data("plotly_click")
if (is.null(d))
{"Click events appear here (double-click to clear)" }
else
{
pd = gsub("_[A-Z]$", "",  d$key)
lin = paste("https://www.rcsb.org/3d-view/", pd, "/1" , sep = "")
browseURL(lin, browser = 'false')
d
}
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
ggplot(full.data.px.vec, aes(p2p2x.y , h_cgvc.y, color = factor(V19), fill = factor(V19)))  +
geom_point(size = 5, alpha =1) +
scale_color_manual(values = colors) +
theme_light(base_size = 20) +
theme(axis.title = element_blank(),
axis.text = element_text(size = 20),
panel.border = element_rect(colour = "black", fill=NA, size=1.5) ,
legend.text = element_text(size = 20),
legend.position = "none")
source("train_random_forest.R")
library(plotly)
library(ggplot2)
ggplot(full.data.px.vec, aes(p2p2x.y , h_cgvc.y, color = factor(V19), fill = factor(V19)))  +
geom_point(size = 5, alpha =1) +
scale_color_manual(values = colors) +
theme_light(base_size = 20) +
theme(axis.title = element_blank(),
axis.text = element_text(size = 20),
panel.border = element_rect(colour = "black", fill=NA, size=1.5) ,
legend.text = element_text(size = 20),
legend.position = "none")
ggplot(full.data.px.vec, aes(p2p2x.y , h_cgvc.y, color = factor(V19), fill = factor(V19)))  +
geom_point(size = 5, alpha =1) +
scale_color_manual(values = colors) +
theme_light(base_size = 20) +
theme(
axis.text = element_text(size = 20),
panel.border = element_rect(colour = "black", fill=NA, size=1.5) ,
legend.text = element_text(size = 20),
)
